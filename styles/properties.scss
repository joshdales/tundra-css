@use 'sass:map';
@use './colours';
@use './radius';
@use './spacing';
@use './typography';

@mixin create_prop($name, $syntax: "*", $value, $inherits: false) {
	@if $syntax !="*" {
		$syntax: "<#{$syntax}>";
	}

	@property --#{$name} {
		syntax: $syntax;
		inherits: $inherits;
		initial-value: $value
	}
}

$_colours: (
	"accent": colours.$neutrals
);
$_colours: map.merge(colours.$colours, $_colours);

@each $colour, $values in $_colours {
	@each $level, $value in $values {
		@if ($level ==0) {
			@include create_prop($colour, "color", $value, $colour =="accent");
		}

		@else {
			@include create_prop("#{$colour}-#{$level}", "color", $value, $colour =="accent");
		}
	}
}

@each $level, $value in radius.$radius {
	@include create_prop("radius-#{$level}", "length", $value);
}

@each $level, $value in spacing.$space {
	@include create_prop("space-#{$level}", "length", $value);
}

@include create_prop("font-size", "*", typography.$font-size-3, true);

@each $level, $value in typography.$font-size {
	@include create_prop("font-size-#{$level}", "*", $value);
}

@include create_prop("font-weight", "number", typography.$font-weight-2, true);

@each $level, $value in typography.$font-weight {
	@include create_prop("font-weight-#{$level}", "number", $value);
}

@include create_prop("letter-spacing", "*", typography.$letter-spacing-3, true);

@each $level, $value in typography.$letter-spacing {
	@include create_prop("letter-spacing-#{$level}", "*", $value);
}

@include create_prop("letter-spacing", "*", typography.$line-height-1, true);

@each $level, $value in typography.$line-height {
	@include create_prop("line-height-#{$level}", "number", $value);
}
